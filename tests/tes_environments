import pytest
from fastapi import FastAPI
from fastapi.testclient import TestClient
from unittest.mock import patch
from api.controllers.environments_controller import router as env_router

app = FastAPI()
app.include_router(env_router)

@pytest.fixture
def client():
    return TestClient(app)

def test_get_environments_success(client):
    mock_response = [
        {"_id": "680f8359688cb5341f9f9c19", "name": "Test Environment"}
    ]
    with patch("services.environments_service.EnvironmentsService.get_environments", return_value=mock_response):
        response = client.get("/environments")
        assert response.status_code == 200
        assert "environments" in response.json()

def test_get_environments_not_found(client):
    with patch("services.environments_service.EnvironmentsService.get_environments", return_value=[]):
        response = client.get("/environments")
        assert response.status_code == 404
        assert response.json()["message"] == "No environments found"

def test_get_environment_by_id_success(client):
    mock_env = {"_id": "680f8359688cb5341f9f9c19", "name": "Test Environment"}
    with patch("services.environments_service.EnvironmentsService.get_environment_by_id", return_value=mock_env):
        response = client.get("/environments/680f8359688cb5341f9f9c19")
        assert response.status_code == 200
        assert "environment" in response.json()

def test_get_environment_by_id_not_found(client):
    with patch("services.environments_service.EnvironmentsService.get_environment_by_id", return_value=None):
        response = client.get("/environments/doesnotexist")
        assert response.status_code == 404
        assert response.json()["message"] == "Environment not found"

def test_delete_environment_success(client):
    with patch("services.environments_service.EnvironmentsService.delete_environment", return_value=True):
        response = client.delete("/environments/680f8359688cb5341f9f9c19")
        assert response.status_code == 200
        assert response.json()["message"] == "Environment deleted successfully"

def test_delete_environment_not_found(client):
    with patch("services.environments_service.EnvironmentsService.delete_environment", return_value=False):
        response = client.delete("/environments/doesnotexist")
        assert response.status_code == 404
        assert response.json()["message"] == "Environment could not be deleted"