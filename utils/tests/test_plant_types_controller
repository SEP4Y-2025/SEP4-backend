import pytest
from unittest.mock import MagicMock, patch
from services.plant_types_service import PlantTypesService

@pytest.fixture
def service():
    return PlantTypesService()

def test_add_plant_type_success(service):
    service.repository.get_environment_by_id = MagicMock(return_value={"_id": "env_1"})
    service.repository.post_plant_type = MagicMock(return_value="plant_type_1")

    plant_type = {
        "plant_type_name": "Cactus",
        "plant_env_id": "env_1",
        "watering_freq": 7,
        "water_dosage": 100
    }

    result = service.add_plant_type(plant_type)

    service.repository.get_environment_by_id.assert_called_once_with("env_1")
    service.repository.post_plant_type.assert_called_once_with(plant_type)
    assert result == "plant_type_1"

def test_add_plant_type_missing_data(service):
    plant_type = {
        "plant_env_id": "env_1",
        "watering_freq": 7,
        "water_dosage": 100
    }

    with pytest.raises(ValueError, match="Invalid plant type data: 'plant_type_name' and 'plant_env_id' are required"):
        service.add_plant_type(plant_type)

def test_add_plant_type_invalid_environment(service):
    service.repository.get_environment_by_id = MagicMock(return_value=None)

    plant_type = {
        "plant_type_name": "Cactus",
        "plant_env_id": "invalid_env",
        "watering_freq": 7,
        "water_dosage": 100
    }

    with pytest.raises(ValueError, match="Environment ID invalid_env does not exist"):
        service.add_plant_type(plant_type)

    service.repository.get_environment_by_id.assert_called_once_with("invalid_env")

def test_get_all_plant_types_success(service):
    service.repository.get_plant_types_by_environment = MagicMock(return_value=[
        {"_id": "plant_type_1", "plant_type_name": "Cactus", "watering_freq": 7, "water_dosage": 100},
        {"_id": "plant_type_2", "plant_type_name": "Fern", "watering_freq": 3, "water_dosage": 50}
    ])

    result = service.get_all_plant_types("env_1")

    service.repository.get_plant_types_by_environment.assert_called_once_with("env_1")
    assert len(result) == 2
    assert result[0]["plant_type_name"] == "Cactus"
    assert result[1]["plant_type_name"] == "Fern"

def test_get_all_plant_types_no_data(service):
    service.repository.get_plant_types_by_environment = MagicMock(return_value=[])

    with pytest.raises(ValueError, match="No plant types found for environment ID: env_1"):
        service.get_all_plant_types("env_1")

    service.repository.get_plant_types_by_environment.assert_called_once_with("env_1")